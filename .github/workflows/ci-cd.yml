name: WorkProfile CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: workprofile-app
  REGISTRY_USER: naamafisher
  REGISTRY: ghcr.io

jobs:
  # Stage 1: Validation
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate Python dependencies (install first)
        run: |
          python3 -m pip install --upgrade pip
          pip install -r workprofile-advanced/requirements.txt
          python3 -c "import flask; print('✓ Flask OK')"
          python3 -c "import mysql.connector; print('✓ MySQL Connector OK')"

      - name: Validate required files exist
        run: |
          test -f Dockerfile && echo "✓ Dockerfile OK"
          test -f workprofile-advanced/requirements.txt && echo "✓ requirements.txt OK"
          test -f workprofile-advanced/src/app.py && echo "✓ app.py OK"

  # Stage 2: Build & Test Single Container
  build-test:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Run container
        run: docker run -d -p 5000:5000 --name app ${{ env.IMAGE_NAME }}

      - name: Wait for container to be ready
        run: sleep 15

      - name: Test main endpoint
        run: curl -f http://localhost:5000/

      - name: Test health endpoint
        run: curl -f http://localhost:5000/health

  # Stage 3: Publish to GHCR
  publish:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Extract short SHA
        id: version
        run: echo "sha_tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GH_TOKEN11 }}" | docker login ${{ env.REGISTRY }} -u ${{ env.REGISTRY_USER }} --password-std
